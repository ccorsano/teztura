// Generated by CoffeeScript 1.6.3
var Bezier, FloatBuffer, Layer, Point, Rect;

Point = (function() {
  function Point(x, y) {
    this.x = x;
    this.y = y;
  }

  return Point;

})();

Rect = (function() {
  function Rect(x, y, width, height) {
    this.x = x;
    this.y = y;
    this.width = width;
    this.height = height;
  }

  Rect.prototype.intersect = function(rect) {
    var nmaxx, nmaxy, nx, ny;
    nmaxx = Math.min(this.x + this.width, rect.x + rect.width);
    nmaxy = Math.min(this.x + this.width, rect.x + rect.width);
    nx = Math.max(this.x, rect.x);
    ny = Math.max(this.y, rect.y);
    return new Rect(nx, ny, Math.max(0, nmaxx - nx), Math.max(0, nmaxy - ny));
  };

  return Rect;

})();

FloatBuffer = (function() {
  function FloatBuffer(width, height) {
    this.width = width;
    this.height = height;
    this.buffer = new ArrayBuffer(this.width * this.height * 4);
    this.fbuffer = new Float32Array(this.buffer);
  }

  return FloatBuffer;

})();

Layer = (function() {
  function Layer(width, height) {
    this.width = width;
    this.height = height;
    this.fbuffer = new FloatBuffer(this.width, this.height);
    this.canvas = this.createCanvas(this.width, this.height);
    this.context = this.canvas.getContext('2d');
    this.imageData = this.context.getImageData(0, 0, width, height);
  }

  Layer.prototype.createCanvas = function(width, height) {
    var c;
    c = document.createElement('canvas');
    c.width = width;
    c.height = height;
    return c;
  };

  return Layer;

})();

Bezier = {
  quadratic: function(pts, t) {
    var f2, f3, lerp;
    lerp = function(a, b, t) {
      return a * t + b * (1 - t);
    };
    f3 = function(v1, v2, v3, t) {
      return lerp(lerp(v1, v2, t), lerp(v2, v3, t), t);
    };
    f2 = function(v1, v2, t) {
      return lerp(v1, v2, t);
    };
    if (pts.length === 1) {
      return pts[0];
    } else if (pts.length === 2) {
      return new Point(f2(pts[0].x, pts[1].x, t), f2(pts[0].y, pts[1].y, t));
    } else {
      return new Point(f3(pts[0].x, pts[1].x, pts[2].x, t), f3(pts[0].y, pts[1].y, pts[2].y, t));
    }
  }
};

if (typeof module !== "undefined" && module !== null) {
  module.exports = {
    Point: Point,
    Rect: Rect,
    FloatBuffer: FloatBuffer,
    Layer: Layer
  };
}
