// Generated by CoffeeScript 1.6.3
var Core, V, V3, assert, assertClose;

assert = require('assert');

Core = require('../core');

assertClose = function(a, b) {
  return assert(Math.abs(a - b) < 1.0e-8, "" + a + " != " + b);
};

V = function(x, y) {
  return new Core.Vec2(x, y);
};

describe('Rect', function() {
  it('should intersect correctly', function() {
    var a, b;
    a = new Core.Rect(10, 20, 100, 100);
    b = new Core.Rect(20, 10, 100, 100);
    assertClose(a.intersect(b).width, 90);
    assertClose(b.intersect(a).width, 90);
    assertClose(a.intersect(b).height, 90);
    assertClose(b.intersect(a).height, 90);
    a = new Core.Rect(0, 0, 100, 100);
    b = new Core.Rect(200, 50, 100, 100);
    assertClose(a.intersect(b).width, 0);
    return assertClose(b.intersect(a).height, 50);
  });
  it('should intersect inner rect', function() {
    var a, b, c;
    a = new Core.Rect(0, 0, 100, 100);
    b = new Core.Rect(10, 20, 20, 20);
    c = a.intersect(b);
    return assert.deepEqual(b, c);
  });
  it('should union', function() {
    var a, b, c;
    a = new Core.Rect(10, 20, 10, 10);
    b = new Core.Rect(15, 25, 10, 15);
    c = a.union(b);
    assertClose(c.x, 10);
    assertClose(c.y, 20);
    assertClose(c.width, 15);
    return assertClose(c.height, 20);
  });
  it('should extend', function() {
    var a;
    a = new Core.Rect(10, 10, 10, 10);
    a.extend(V(5, 0));
    assertClose(a.width, 15);
    assertClose(a.height, 20);
    assertClose(a.x, 5);
    assertClose(a.y, 0);
    a.extend(V(30, 40));
    assertClose(a.width, 25);
    assertClose(a.height, 40);
    assertClose(a.x, 5);
    return assertClose(a.y, 0);
  });
  return it('should not extend inner point', function() {
    var a;
    a = new Core.Rect(10, 10, 10, 10);
    a.extend(V(15, 15));
    return assert.deepEqual(a, new Core.Rect(10, 10, 10, 10));
  });
});

describe('Vec2', function() {
  it('should add and sub', function() {
    var va, vb;
    va = new Core.Vec2(1, 2);
    vb = new Core.Vec2(2, 3);
    assertClose(va.add(vb).x, 3);
    assertClose(va.add(vb).y, 5);
    assertClose(va.sub(vb).x, -1);
    return assertClose(va.sub(vb).y, -1);
  });
  it('should calculate length', function() {
    var v;
    v = new Core.Vec2(3, 4);
    return assertClose(v.length(), 5);
  });
  return it('should normalize', function() {
    var v;
    v = new Core.Vec2(2, 2);
    return assertClose(v.normalized().length(), 1);
  });
});

V3 = Core.Vec3;

describe('Vec3', function() {
  return it('should add and sub', function() {
    var va, vb;
    va = new V3(1, 2, 3);
    vb = new V3(2, 3, 4);
    assertClose(va.add(vb).x, 3);
    assertClose(va.add(vb).y, 5);
    assertClose(va.add(vb).z, 7);
    assertClose(va.sub(vb).x, -1);
    assertClose(va.sub(vb).y, -1);
    return assertClose(va.sub(vb).z, -1);
  });
});
