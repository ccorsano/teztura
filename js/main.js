// Generated by CoffeeScript 1.6.3
(function() {
  var $mainCanvas, FloatBuffer, changeGamma, createCanvas, drawing, fbuffer, gamma, getMainContext, getPenPressure, height, offscreenCtx, offscreenImg, onDraw, refresh, width;

  $mainCanvas = $('#canvas');

  width = $mainCanvas.width();

  height = $mainCanvas.height();

  createCanvas = function(width, height) {
    var c;
    c = document.createElement('canvas');
    c.width = width;
    c.height = height;
    return c;
  };

  offscreenCtx = createCanvas(width, height).getContext('2d');

  FloatBuffer = (function() {
    function FloatBuffer(width, height) {
      this.width = width;
      this.height = height;
      this.buffer = new ArrayBuffer(this.width * this.height * 4);
      this.fbuffer = new Float32Array(this.buffer);
    }

    return FloatBuffer;

  })();

  offscreenImg = offscreenCtx.getImageData(0, 0, width, height);

  drawing = false;

  gamma = 1.0;

  fbuffer = new FloatBuffer(width, height);

  
function updateCanvas (fbuffer, ctx, imgData, rects, gamma) {
  var width = fbuffer.width;
  var height = fbuffer.height;
  var data = imgData.data;
  for(var i in rects) {
    var r = rects[i];
    var minX = r[0];
    var minY = r[1];
    var maxX = minX + r[2];
    var maxY = minY + r[3];
    for(var iy=minY; iy<maxY; ++iy) {
      var offset = iy * width;
      for(var ix=minX; ix<maxX; ++ix) {
        var fval = fbuffer[offset + ix];
        //var val = Math.round(Math.pow((fval + 1.0) * 0.5, gamma) * 255.0)
        var val = Math.pow((fval + 1.0) * 0.5, gamma) * 255.0;
        var i = (offset + ix) << 2;
        data[i] = val;
        data[++i] = val;
        data[++i] = val;
        data[++i] = 0xff;
      }
    }

    ctx.putImageData(imgData, 0, 0, r[0], r[1], r[2], r[3])
  }
}

function fillBuffer(fbuffer, func) {
  var width = fbuffer.width;
  var height = fbuffer.height;
  var invw = 1.0 / width;
  var invh = 1.0 / height;
  for(var iy=0; iy<height; ++iy) {
    var off = iy * width;
    for(var ix=0; ix<width; ++ix) {
      fbuffer[off + ix] = func(ix * invw, iy * invh);
    }
  }
}
;

  getMainContext = function() {
    return $mainCanvas[0].getContext('2d');
  };

  getPenPressure = function() {
    var penAPI, plugin;
    plugin = document.getElementById('wtPlugin');
    penAPI = plugin.penAPI;
    if (penAPI && penAPI.pointerType > 0) {
      return penAPI.pressure;
    }
    return 1.0;
  };

  onDraw = function(e) {
    var brushH, brushRect, brushW, brushX, brushY, i, ix, iy, pressure, _i, _j;
    brushX = e.pageX - $mainCanvas.position().left;
    brushY = e.pageY - $mainCanvas.position().top;
    brushW = 20;
    brushH = 20;
    pressure = getPenPressure();
    for (ix = _i = 0; 0 <= brushW ? _i <= brushW : _i >= brushW; ix = 0 <= brushW ? ++_i : --_i) {
      for (iy = _j = 0; 0 <= brushH ? _j <= brushH : _j >= brushH; iy = 0 <= brushH ? ++_j : --_j) {
        i = brushX + ix + (brushY + iy) * width;
        fbuffer[i] += pressure * 0.2;
      }
    }
    brushRect = [brushX, brushY, brushW, brushH];
    updateCanvas(fbuffer, offscreenCtx, offscreenImg, [brushRect], gamma);
    return getMainContext().drawImage(offscreenCtx.canvas, brushRect[0], brushRect[1], brushRect[2], brushRect[3], brushRect[0], brushRect[1], brushRect[2], brushRect[3]);
  };

  changeGamma = function(value) {
    gamma = value;
    return refresh();
  };

  refresh = function() {
    updateCanvas(fbuffer, offscreenCtx, offscreenImg, [[0, 0, width, height]], gamma);
    return getMainContext().drawImage(offscreenCtx.canvas, 0, 0);
  };

  $mainCanvas.mouseup(function(e) {
    return drawing = false;
  });

  $mainCanvas.mousedown(function(e) {
    drawing = true;
    return onDraw(e);
  });

  $mainCanvas.mousemove(function(e) {
    if (drawing) {
      return onDraw(e);
    }
  });

  $('#gammaSlider').slider({
    min: 0,
    max: 4,
    step: 0.01,
    value: gamma,
    change: function(evt, ui) {
      return changeGamma(ui.value);
    }
  });

  fillBuffer(fbuffer, function(x, y) {
    return Math.sin(x * y * 10);
  });

  refresh();

}).call(this);
