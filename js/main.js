// Generated by CoffeeScript 1.6.3
var $mainCanvas, Brush, TestBrush1, changeGamma, drawing, gamma, getMainContext, getPenPressure, height, layer, offset, onDraw, refresh, width;

$mainCanvas = $('#canvas');

width = $mainCanvas.width();

height = $mainCanvas.height();

Brush = (function() {
  function Brush() {}

  Brush.prototype.stroke = function(layer, start, end, pressure) {};

  Brush.prototype.move = function(pos, intensity) {};

  Brush.prototype.beginStroke = function(pos) {};

  Brush.prototype.endStroke = function(pos) {};

  return Brush;

})();

TestBrush1 = (function() {
  function TestBrush1() {}

  TestBrush1.prototype.drawing = false;

  TestBrush1.prototype.lastpos = null;

  TestBrush1.prototype.accumulator = 0.0;

  TestBrush1.prototype.stepSize = 4.0;

  TestBrush1.prototype.move = function(pos, intensity) {};

  TestBrush1.prototype.draw = function(layer, pos, intensity) {
    var delt, dir, lastpos, length, pt;
    delt = pos.sub(lastpos);
    length = delt.length();
    dir = delt.scale(1.0 / length);
    while (this.accumulator + stepSize <= length) {
      this.accumulator += this.stepSize;
      pt = pos + dir.scale(this.accumulator);
    }
    this.accumulator -= length;
    return lastpos = pos;
  };

  TestBrush1.prototype.beginStroke = function(pos) {
    var drawing;
    drawing = true;
    return this.accumulator = 0;
  };

  TestBrush1.prototype.endStroke = function(pos) {
    var drawing, lastpos;
    lastpos = null;
    return drawing = false;
  };

  return TestBrush1;

})();

drawing = false;

gamma = 1.0;

layer = new Layer(width, height);

offset = new Vector(50, 30);


function drawLayer (layer, rects, gamma) {
  var width = layer.width;
  var height = layer.height;
  var imgData = layer.imageData.data;
  var fb = layer.data.fbuffer;
  for(var i in rects) {
    var r = rects[i];
    var minX = r[0];
    var minY = r[1];
    var maxX = minX + r[2];
    var maxY = minY + r[3];
    for(var iy=minY; iy<maxY; ++iy) {
      var offset = iy * width;
      for(var ix=minX; ix<maxX; ++ix) {
        var fval = fb[offset + ix];
        var val = Math.pow((fval + 1.0) * 0.5, gamma) * 255.0;
        var i = (offset + ix) << 2;
        imgData[i] = val;
        imgData[++i] = val;
        imgData[++i] = val;
        imgData[++i] = 0xff;
      }
    }

    layer.context.putImageData(layer.imageData, 0, 0, r[0], r[1], r[2], r[3])
  }
}

function fillLayer(layer, func) {
  var width = layer.width;
  var height = layer.height;
  var invw = 1.0 / width;
  var invh = 1.0 / height;
  var fb = layer.data.fbuffer;
  for(var iy=0; iy<height; ++iy) {
    var off = iy * width;
    for(var ix=0; ix<width; ++ix) {
      fb[off + ix] = func(ix * invw, iy * invh);
    }
  }
}
;

getMainContext = function() {
  return $mainCanvas[0].getContext('2d');
};

getPenPressure = function() {
  var penAPI, plugin;
  plugin = document.getElementById('wtPlugin');
  penAPI = plugin.penAPI;
  if (penAPI && penAPI.pointerType > 0) {
    return penAPI.pressure;
  }
  return 1.0;
};

onDraw = function(e) {
  var brushH, brushRect, brushW, brushX, brushY, fb, i, ix, iy, pressure, _i, _j;
  brushX = e.pageX - $mainCanvas.position().left - offset.x;
  brushY = e.pageY - $mainCanvas.position().top - offset.y;
  brushW = 30;
  brushH = 20;
  pressure = getPenPressure();
  fb = layer.data.fbuffer;
  for (ix = _i = 0; 0 <= brushW ? _i <= brushW : _i >= brushW; ix = 0 <= brushW ? ++_i : --_i) {
    for (iy = _j = 0; 0 <= brushH ? _j <= brushH : _j >= brushH; iy = 0 <= brushH ? ++_j : --_j) {
      i = brushX + ix + (brushY + iy) * width;
      fb[i] += pressure * 0.2;
    }
  }
  brushRect = [brushX, brushY, brushW + 1, brushH + 1];
  drawLayer(layer, [brushRect], gamma);
  return getMainContext().drawImage(layer.canvas, brushRect[0], brushRect[1], brushRect[2], brushRect[3], offset.x + brushRect[0], offset.y + brushRect[1], brushRect[2], brushRect[3]);
};

changeGamma = function(value) {
  gamma = value;
  return refresh();
};

refresh = function() {
  drawLayer(layer, [[0, 0, width, height]], gamma);
  return getMainContext().drawImage(layer.canvas, offset.x, offset.y);
};

$mainCanvas.mouseup(function(e) {
  return drawing = false;
});

$mainCanvas.mousedown(function(e) {
  drawing = true;
  return onDraw(e);
});

$mainCanvas.mousemove(function(e) {
  if (drawing) {
    return onDraw(e);
  }
});

$('#gammaSlider').slider({
  min: 0,
  max: 4,
  step: 0.01,
  value: gamma,
  change: function(evt, ui) {
    return changeGamma(ui.value);
  }
});

fillLayer(layer, function(x, y) {
  return Math.sin(x * y * 10);
});

refresh();
