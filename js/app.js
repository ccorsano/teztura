// Generated by CoffeeScript 1.6.3
var AppCtrl, BlendModes, Document, DocumentView, Editor, getBrush, getBrush2, getPenPressure;

Document = (function() {
  function Document(width, height) {
    this.width = width;
    this.height = height;
    this.layer = new Layer(this.width, this.height);
  }

  return Document;

})();

BlendModes = {
  add: [genBlendFunc("intensity", "{dst} += {src} * intensity"), genBlendFunc("intensity", "{dst} -= {src} * intensity")],
  blendTarget: [
    (function() {
      var func;
      func = genBlendFunc("intensity, target", "{dst} = {dst} * (1 - intensity * {src}) + target * {src}");
      return function(pos, srcFb, dstFb, intensity, target) {
        var inttarget;
        inttarget = intensity * target;
        return func(pos, srcFb, dstFb, intensity, inttarget);
      };
    })()
  ]
};

getBrush = function() {
  var bfunc, brush, brushLayer, target;
  brush = new StepBrush();
  brush.stepSize = 4;
  brushLayer = new Layer(32, 32);
  fillLayer(brushLayer, getRoundBrushFunc(0.8));
  bfunc = BlendModes['blendTarget'][0];
  target = 1.0;
  brush.drawStep = function(layer, pos, intensity, rect) {
    var r;
    r = new Rect(pos.x - brushLayer.width * 0.5, pos.y - brushLayer.height * 0.5, brushLayer.width, brushLayer.height).round();
    bfunc(r.topLeft(), brushLayer, layer, intensity * 0.1, target);
    return rect.extend(r);
  };
  return brush;
};

getBrush2 = function() {
  var bfunc, brush, brushLayer, target;
  brush = new StepBrush();
  brush.stepSize = 4;
  brushLayer = new Layer(32, 32);
  fillLayer(brushLayer, getRoundBrushFunc(0.8));
  bfunc = BlendModes['blendTarget'][0];
  target = 1.0;
  brush.drawStep = function(layer, pos, intensity, rect) {
    var r;
    r = new Rect(pos.x - brushLayer.width * 0.5, pos.y - brushLayer.height * 0.5, brushLayer.width, brushLayer.height).round();
    bfunc(r.topLeft(), brushLayer, layer, intensity * 0.1, target);
    return rect.extend(r);
  };
  return brush;
};

Editor = {
  brush: getBrush2(),
  renderer: GammaRenderer
};

DocumentView = (function() {
  DocumentView.prototype.drawing = false;

  DocumentView.prototype.panning = false;

  DocumentView.prototype.imageData = null;

  DocumentView.prototype.context = null;

  DocumentView.prototype.canvas = null;

  DocumentView.prototype.backContext = null;

  DocumentView.prototype.doc = null;

  DocumentView.prototype.offset = new Vector(0.0, 0.0);

  DocumentView.prototype.scale = 1;

  function DocumentView($container, doc) {
    var $backCanvas, $canvas, getCanvasCoords, getCoords, local, self;
    console.log("DocumentView constructor");
    this.doc = doc;
    $container.empty();
    $canvas = $('<canvas/>', {
      'class': ''
    }).attr({
      width: doc.width,
      height: doc.height
    });
    $backCanvas = $('<canvas/>', {
      'class': ''
    }).attr({
      width: doc.width,
      height: doc.height
    });
    $container.append($backCanvas);
    this.backContext = $backCanvas[0].getContext('2d');
    this.canvas = $canvas[0];
    this.context = $canvas[0].getContext('2d');
    this.imageData = this.context.getImageData(0, 0, doc.width, doc.height);
    this.context.mozImageSmoothingEnabled = false;
    self = this;
    getCoords = function(e) {
      var x, y;
      x = e.pageX - $backCanvas.position().left;
      y = e.pageY - $backCanvas.position().top;
      return new Vector(x, y);
    };
    getCanvasCoords = function(e) {
      var v;
      v = getCoords(e);
      return self.screenToCanvas(v);
    };
    local = {};
    $container.mousedown(function(e) {
      e.preventDefault();
      if (e.which === 1) {
        self.drawing = true;
        Editor.brush.beginStroke();
        self.onDraw(getCanvasCoords(e));
      }
      if (e.which === 2) {
        self.panning = true;
        local.panningStart = getCoords(e);
        return local.offsetStart = self.offset;
      }
    });
    $container.mouseup(function(e) {
      if (e.which === 1) {
        Editor.brush.endStroke();
        self.drawing = false;
      }
      if (e.which === 2) {
        return self.panning = false;
      }
    });
    $container.mousemove(function(e) {
      var curPos;
      if (self.drawing) {
        self.onDraw(getCanvasCoords(e));
      }
      if (self.panning) {
        curPos = getCoords(e);
        self.offset = local.offsetStart.add(curPos.sub(local.panningStart));
        return self.transformChanged();
      }
    });
  }

  DocumentView.prototype.screenToCanvas = function(pt) {
    return pt.sub(this.offset).scale(1.0 / this.scale);
  };

  DocumentView.prototype.refreshAll = function() {
    var layer;
    layer = this.doc.layer;
    Editor.renderer.renderLayer(layer, this, [new Rect(0, 0, this.doc.width, this.doc.height)]);
    return this.backContext.drawImage(this.canvas, 0, 0);
  };

  DocumentView.prototype.transformChanged = function() {
    this.backContext.setTransform(1, 0, 0, 1, 0, 0);
    this.backContext.translate(this.offset.x, this.offset.y);
    this.backContext.scale(this.scale, this.scale);
    return this.backContext.drawImage(this.canvas, 0, 0);
  };

  DocumentView.prototype.onDraw = function(pos) {
    var brush, dirtyRects, layer, layerRect, pressure, rect, _i, _len, _results;
    pressure = getPenPressure();
    dirtyRects = [];
    layer = this.doc.layer;
    brush = Editor.brush;
    layerRect = layer.getRect();
    rect = brush.draw(layer, pos, pressure).round().intersect(layerRect);
    if (!rect.empty()) {
      dirtyRects.push(rect);
    }
    Editor.renderer.renderLayer(layer, this, dirtyRects);
    _results = [];
    for (_i = 0, _len = dirtyRects.length; _i < _len; _i++) {
      rect = dirtyRects[_i];
      _results.push(this.backContext.drawImage(this.canvas, rect.x, rect.y, rect.width + 1, rect.height + 1, rect.x, rect.y, rect.width + 1, rect.height + 1));
    }
    return _results;
  };

  return DocumentView;

})();

AppCtrl = function($scope) {
  return $scope.test = 'lol';
};

getPenPressure = function() {
  var penAPI, plugin;
  plugin = document.getElementById('wtPlugin');
  penAPI = plugin.penAPI;
  if (penAPI && penAPI.pointerType > 0) {
    return penAPI.pressure;
  }
  return 1.0;
};

$(document).ready(function() {
  var doc, view;
  doc = new Document(512, 512);
  view = new DocumentView($('.document-view'), doc);
  view.transformChanged();
  return view.refreshAll();
});
