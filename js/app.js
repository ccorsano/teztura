// Generated by CoffeeScript 1.6.3
var Commands, Document, DocumentView, Editor, PropertyPanel, PropertyView, Renderers, Tools, createCommandsButtons, createPalette, createRenderersButtons, createToolsButtons, editor, getPenPressure, loadGradient, refresh, status, toolsProperties, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Document = (function() {
  function Document(width, height) {
    this.width = width;
    this.height = height;
    this.layer = new Layer(this.width, this.height);
    this.backup = new Layer(this.width, this.height);
    this.history = [];
    this.histIndex = -1;
  }

  Document.prototype.afterEdit = function(rect) {
    var histSize;
    if (this.histIndex > 0) {
      this.history.splice(0, this.histIndex);
    }
    this.history.splice(0, 0, {
      data: this.backup.getCopy(rect),
      rect: rect
    });
    this.backup.getBuffer().set(this.layer.getBuffer());
    histSize = 10;
    if (this.history.length > histSize) {
      this.history.splice(histSize);
    }
    this.histIndex = -1;
    return console.log("History len: " + this.history.length);
  };

  Document.prototype.undo = function() {
    if (this.histIndex >= this.history.length - 1) {
      return;
    }
    if (this.histIndex === -1) {
      this.afterEdit(this.history[0].rect);
      this.histIndex = 1;
    } else {
      this.histIndex++;
    }
    console.log("History idx: " + this.histIndex);
    return this.restore(this.history[this.histIndex]);
  };

  Document.prototype.redo = function() {
    if (this.histIndex <= 0) {
      return;
    }
    this.histIndex--;
    console.log("History idx: " + this.histIndex);
    return this.restore(this.history[this.histIndex]);
  };

  Document.prototype.restore = function(histItem) {
    return this.layer.setData(histItem.data, histItem.rect);
  };

  return Document;

})();

Renderers = [GammaRenderer, NormalRenderer, GradientRenderer];

Tools = [RoundBrush, Picker];

Commands = [
  {
    name: "Fill",
    func: function(doc) {
      var val;
      val = editor.get('targetValue');
      fillLayer(doc.layer, function(x, y) {
        return val;
      });
      return refresh();
    }
  }, {
    name: "Invert",
    func: function(doc) {
      var buf, len;
      buf = doc.layer.getBuffer();
      len = buf.length;
      for(var i=0; i<len; ++i) {
        buf[i] = -buf[i];
      }
      ;
      return refresh();
    }
  }, {
    name: "Flip H",
    func: function(doc) {
      var buf, halfw, height, len, maxx, tmp, width;
      buf = doc.layer.getBuffer();
      len = buf.length;
      height = doc.layer.height;
      width = doc.layer.width;
      halfw = Math.floor(doc.layer.width / 2.0);
      maxx = doc.layer.width - 1;
      tmp = 0.0;
      for(var iy=0; iy<height; ++iy) {
        var offset = iy * width
        for(var ix=0; ix<halfw; ++ix) {
          tmp = buf[offset + ix];
          buf[offset + ix] = buf[offset + maxx - ix];
          buf[offset + maxx - ix] = tmp;
        }
      }
      ;
      return refresh();
    }
  }, {
    name: "Flip V",
    func: function(doc) {
      var buf, halfh, height, len, maxy, tmp, width;
      buf = doc.layer.getBuffer();
      len = buf.length;
      height = doc.layer.height;
      width = doc.layer.width;
      halfh = Math.floor(doc.layer.width / 2.0);
      maxy = doc.layer.width - 1;
      tmp = 0.0;
      for(var iy=0; iy<halfh; ++iy) {
        for(var ix=0; ix<width; ++ix) {
          tmp = buf[iy*width + ix];
          buf[iy*width + ix] = buf[(maxy - iy)*width + ix];
          buf[(maxy - iy)*width + ix] = tmp;
        }
      }
      ;
      return refresh();
    }
  }
];

DocumentView = (function() {
  DocumentView.prototype.drawing = false;

  DocumentView.prototype.panning = false;

  DocumentView.prototype.imageData = null;

  DocumentView.prototype.context = null;

  DocumentView.prototype.canvas = null;

  DocumentView.prototype.backContext = null;

  DocumentView.prototype.doc = null;

  DocumentView.prototype.offset = new Vec2(0.0, 0.0);

  DocumentView.prototype.scale = 1.0;

  function DocumentView($container, doc) {
    var $backCanvas, $canvas, getCanvasCoords, getCoords, local,
      _this = this;
    this.doc = doc;
    $container.empty();
    $canvas = $('<canvas/>', {
      'class': ''
    }).attr({
      width: doc.width,
      height: doc.height
    });
    $backCanvas = $('<canvas/>', {
      'class': ''
    }).attr({
      width: doc.width,
      height: doc.height
    });
    $container.append($backCanvas);
    this.backContext = $backCanvas[0].getContext('2d');
    this.canvas = $canvas[0];
    this.context = $canvas[0].getContext('2d');
    this.imageData = this.context.getImageData(0, 0, doc.width, doc.height);
    this.context.mozImageSmoothingEnabled = false;
    getCoords = function(e) {
      var x, y;
      x = e.pageX - $backCanvas.position().left;
      y = e.pageY - $backCanvas.position().top;
      return new Vec2(x, y);
    };
    getCanvasCoords = function(e) {
      var v;
      v = getCoords(e);
      return _this.screenToCanvas(v);
    };
    local = {};
    $backCanvas.mousedown(function(e) {
      var coords;
      e.preventDefault();
      if (e.which === 1) {
        _this.drawing = true;
        _this.actionDirtyRect = null;
        coords = getCanvasCoords(e);
        editor.getToolObject().beginDraw(coords);
        _this.onDraw(coords);
      }
      if (e.which === 2) {
        _this.panning = true;
        local.panningStart = getCoords(e);
        return local.offsetStart = _this.offset.clone();
      }
    });
    $container.mouseup(function(e) {
      e.preventDefault();
      if (e.which === 1) {
        editor.getToolObject().endDraw(getCanvasCoords(e));
        _this.drawing = false;
        if (_this.actionDirtyRect != null) {
          doc.afterEdit(_this.actionDirtyRect);
        }
      }
      if (e.which === 2) {
        return _this.panning = false;
      }
    });
    $container.mousemove(function(e) {
      var curPos, o;
      e.preventDefault();
      if (_this.drawing) {
        _this.onDraw(getCanvasCoords(e));
      }
      if (_this.panning) {
        curPos = getCoords(e);
        o = local.offsetStart.add(curPos.sub(local.panningStart));
        _this.offset = o;
        return _this.rePaint();
      }
    });
  }

  DocumentView.prototype.screenToCanvas = function(pt) {
    return pt.sub(this.offset).scale(1.0 / this.scale);
  };

  DocumentView.prototype.reRender = function() {
    var layer;
    layer = this.doc.layer;
    editor.get('renderer').renderLayer(layer, this, [new Rect(0, 0, this.doc.width, this.doc.height)]);
    return this.rePaint();
  };

  DocumentView.prototype.rePaint = function() {
    var ctx;
    ctx = this.backContext;
    ctx.setTransform(1, 0, 0, 1, 0, 0);
    ctx.translate(this.offset.x, this.offset.y);
    ctx.scale(this.scale, this.scale);
    if (editor.get('tiling')) {
      ctx.fillStyle = ctx.createPattern(this.canvas, "repeat");
      return ctx.fillRect(-this.offset.x / this.scale, -this.offset.y / this.scale, this.canvas.width / this.scale, this.canvas.height / this.scale);
    } else {
      return ctx.drawImage(this.canvas, 0, 0);
    }
  };

  DocumentView.prototype.onDraw = function(pos) {
    var dirtyRects, layer, layerRect, pressure, r, tool, totalArea, xoff, yoff, _i, _j, _len, _len1, _ref, _ref1,
      _this = this;
    pressure = getPenPressure();
    dirtyRects = [];
    layer = this.doc.layer;
    tool = editor.getToolObject();
    layerRect = layer.getRect();
    r = tool.draw(layer, pos, pressure).round();
    if (editor.get('tiling')) {
      _ref = [-1, 0, 1];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        xoff = _ref[_i];
        _ref1 = [-1, 0, 1];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          yoff = _ref1[_j];
          dirtyRects.push(r.offset(new Vec2(xoff * layerRect.width, yoff * layerRect.height)));
        }
      }
    } else {
      dirtyRects.push(r.intersect(layerRect));
    }
    dirtyRects = dirtyRects.map(function(r) {
      return r.intersect(layerRect);
    }).filter(function(r) {
      return !r.isEmpty();
    });
    dirtyRects.forEach(function(r) {
      if (_this.actionDirtyRect == null) {
        return _this.actionDirtyRect = r.clone();
      } else {
        return _this.actionDirtyRect.extend(r);
      }
    });
    if (false) {
      totalArea = dirtyRects.map(function(r) {
        return r.width * r.height;
      }).reduce(function(a, b) {
        return a + b;
      });
      console.log("" + dirtyRects.length + " rects, " + (Math.round(Math.sqrt(totalArea))) + " pxÂ²");
    }
    if (true) {
      editor.get('renderer').renderLayer(layer, this, dirtyRects);
      return this.rePaint();
    }
  };

  return DocumentView;

})();

Editor = (function(_super) {
  __extends(Editor, _super);

  function Editor() {
    _ref = Editor.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  Editor.prototype.defaults = function() {
    return {
      doc: null,
      tool: null,
      preset: null,
      renderer: null,
      tiling: true,
      targetValue: 1.0,
      altkeyDown: false
    };
  };

  Editor.prototype.initialize = function() {
    this.toolObject = null;
    this.on('change:tool', function() {
      var tool;
      this.setToolDirty();
      tool = this.get('tool');
      return toolsProperties.setTool(tool);
    });
    this.on('change:preset', function() {
      var p;
      p = this.get('preset');
      return this.set('tool', p.tools[0]);
    });
    this.on('change:altkeyDown', function() {
      var idx, p;
      idx = this.get('altkeyDown') ? 1 : 0;
      p = this.get('preset');
      return this.set('tool', p.tools[idx]);
    });
    return this.on('change:renderer', function() {
      this.get('view').reRender();
      return this.get('view').rePaint();
    });
  };

  Editor.prototype.createDoc = function(w, h) {
    var doc;
    doc = new Document(512, 512);
    fillLayer(doc.layer, function(x, y) {
      return -1;
    });
    this.set('doc', doc);
    return this.set('view', new DocumentView($('.document-view'), doc));
  };

  Editor.prototype.getToolObject = function() {
    var o;
    if (this.get('toolObject') === null) {
      console.log("Creating brush of type " + this.get("tool").description.name);
      o = this.get('tool').createTool(this);
      this.set('toolObject', o);
    }
    return this.get('toolObject');
  };

  Editor.prototype.setToolDirty = function() {
    return this.set('toolObject', null);
  };

  Editor.prototype.refresh = function() {
    var v;
    v = this.get('view');
    v.reRender();
    return v.rePaint();
  };

  return Editor;

})(Backbone.Model);

PropertyView = Backbone.View.extend({
  className: "property",
  initialize: function() {
    var $input, $slider, conv, invconv, power, prop, rmax, rmin, step, tool;
    tool = this.model.tool;
    prop = this.model.prop;
    $('<span/>').text(prop.name).appendTo(this.$el);
    if (prop.range != null) {
      power = prop.power || 1.0;
      conv = function(v) {
        return Math.pow(v, power);
      };
      invconv = function(v) {
        return Math.pow(v, 1.0 / power);
      };
      rmin = invconv(prop.range[0]);
      rmax = invconv(prop.range[1]);
      step = prop.type === 'int' ? 1 : (rmax - rmin) / 100;
      $slider = $('<div/>').slider({
        min: rmin,
        max: rmax,
        value: invconv(tool.get(prop.id)),
        step: step,
        change: function(evt, ui) {
          tool.set(prop.id, conv(ui.value));
          return editor.setToolDirty();
        }
      }).width(200).appendTo(this.$el);
      $input = $('<input/>').val(tool.get(prop.id)).appendTo(this.$el).change(function(evt) {
        if (prop.type === 'int') {
          return tool.set(prop.id, parseInt($input.val()));
        } else {
          return tool.set(prop.id, parseFloat($input.val()));
        }
      });
      return this.listenTo(this.model.tool, "change:" + prop.id, function() {
        var v;
        v = tool.get(prop.id);
        $input.val(v);
        return $slider.slider("value", invconv(v));
      });
    }
  }
});

PropertyPanel = (function() {
  function PropertyPanel(selector) {
    this.selector = selector;
    this.views = [];
  }

  PropertyPanel.prototype.setTool = function(tool) {
    var _this = this;
    this.removeViews();
    return tool.properties.forEach(function(prop) {
      var v;
      v = new PropertyView({
        model: {
          prop: prop,
          tool: tool
        }
      });
      $(_this.selector).append(v.$el);
      return _this.views.push(v);
    });
  };

  PropertyPanel.prototype.removeViews = function() {
    this.views.forEach(function(v) {
      return v.remove();
    });
    return this.views = [];
  };

  return PropertyPanel;

})();

getPenPressure = function() {
  var penAPI, plugin;
  plugin = document.getElementById('wtPlugin');
  penAPI = plugin.penAPI;
  if (penAPI && penAPI.pointerType > 0) {
    return penAPI.pressure;
  }
  return 1.0;
};

status = function(txt) {
  return $('#status-bar').text(txt);
};

refresh = function() {
  return editor.refresh();
};

editor = null;

toolsProperties = null;

createToolsButtons = function($container) {
  $container.empty();
  return Tools.forEach(function(b) {
    var $btn, name;
    name = b.description.name;
    $btn = $('<button/>').attr({
      'class': 'btn'
    }).text(name);
    $btn.click(function(e) {
      return editor.set('tool', b);
    });
    return $container.append($btn);
  });
};

createRenderersButtons = function($container) {
  $container.empty();
  return Renderers.forEach(function(r) {
    var $btn, name;
    name = r.description.name;
    $btn = $('<button/>').attr({
      'class': 'btn'
    }).text(name);
    $btn.click(function(e) {
      return editor.set('renderer', r);
    });
    return $container.append($btn);
  });
};

createCommandsButtons = function($container) {
  return Commands.forEach(function(cmd) {
    var $btn;
    $btn = $('<button/>').attr({
      'class': 'btn'
    }).text(cmd.name).appendTo($container);
    return $btn.click(function(e) {
      return cmd.func(editor.get('doc'));
    });
  });
};

createPalette = function($container) {
  var $slider;
  $slider = $('<div/>').slider({
    min: -1.0,
    max: 1.0,
    value: editor.get('targetValue'),
    step: 0.005,
    change: function(evt, ui) {
      return editor.set('targetValue', ui.value);
    }
  }).appendTo($container);
  return editor.on('change:targetValue', function() {
    return $slider.slider({
      value: editor.get('targetValue')
    });
  });
};

loadGradient = function(name, url) {
  var $canvas, ctx, imageObj;
  $canvas = $('<canvas/>').attr({
    width: 512,
    height: 1
  });
  ctx = $canvas[0].getContext('2d');
  imageObj = new Image();
  imageObj.onload = function() {
    var data, imageData;
    ctx.drawImage(this, 0, 0);
    imageData = ctx.getImageData(0, 0, 512, 1);
    data = new Uint32Array(imageData.data.buffer);
    return GradientRenderer.properties.gradient = {
      lut: data
    };
  };
  return imageObj.src = url;
};

loadGradient('g1', 'img/gradient-1.png');

$(window).keydown(function(e) {
  if (e.key === 'Control') {
    return editor.set('altkeyDown', true);
  }
});

$(window).keyup(function(e) {
  if (e.key === 'Control') {
    editor.set('altkeyDown', false);
  }
  if (e.ctrlKey) {
    switch (e.keyCode) {
      case 90:
        editor.get('doc').undo();
        return editor.refresh();
      case 89:
        editor.get('doc').redo();
        return editor.refresh();
    }
  }
});

$(document).ready(function() {
  toolsProperties = new PropertyPanel('#tools > .properties');
  editor = new Editor();
  editor.createDoc(512, 512);
  createToolsButtons($('#tools > .buttons'));
  createRenderersButtons($('#renderers > .buttons'));
  createPalette($('#palette'));
  createCommandsButtons($('#commands'));
  editor.set('preset', {
    tools: [RoundBrush, Picker]
  });
  return editor.set('renderer', GammaRenderer);
});
